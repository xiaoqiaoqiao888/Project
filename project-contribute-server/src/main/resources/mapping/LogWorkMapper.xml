<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.camelot.pmt.mapper.LogWorkMapper">
    <resultMap id="BaseResultMap" type="com.camelot.pmt.model.LogWork">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="work_id" property="workId" jdbcType="INTEGER"/>
        <result column="project_id" property="projectId" jdbcType="INTEGER"/>
        <result column="stage_id" property="stageId" jdbcType="INTEGER"/>
        <result column="work_name" property="workName" jdbcType="VARCHAR"/>
        <result column="work_budget" property="workBudget" jdbcType="VARCHAR"/>
        <result column="work_value" property="workValue" jdbcType="INTEGER"/>
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP"/>
        <result column="work_state" property="workState" jdbcType="INTEGER"/>
        <result column="work_type" property="workType" jdbcType="INTEGER"/>
        <result column="state" property="state" jdbcType="INTEGER"/>
        <result column="create_by" property="createBy" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_by" property="updateBy" jdbcType="INTEGER"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="end_submit_time" property="endSubmitTime" jdbcType="TIMESTAMP"/>
        <result column="operate_desc" property="operateDesc" jdbcType="VARCHAR"/>
        <result column="update_user_name" property="updateUserName" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insertLogWork" parameterType="com.camelot.pmt.model.LogWork">
        insert into log_work
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="workId != null">
                work_id,
            </if>
            <if test="projectId != null">
                project_id,
            </if>
            <if test="stageId != null">
                stage_id,
            </if>
            <if test="workName != null">
                work_name,
            </if>
            <if test="workBudget != null">
                work_budget,
            </if>
            <if test="workValue != null">
                work_value,
            </if>
            <if test="startTime != null">
                start_time,
            </if>
            <if test="endTime != null">
                end_time,
            </if>
            <if test="workState != null">
                work_state,
            </if>
            <if test="workType != null">
                work_type,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="workDesc != null">
                work_desc,
            </if>
            <if test="operateDesc != null">
                operate_desc,
            </if>
            <if test="endSubmitTime != null">
                end_submit_time,
            </if>
            <if test="updateUserName != null">
                update_user_name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="workId != null">
                #{workId,jdbcType=INTEGER},
            </if>
            <if test="projectId != null">
                #{projectId,jdbcType=INTEGER},
            </if>
            <if test="stageId != null">
                #{stageId,jdbcType=INTEGER},
            </if>
            <if test="workName != null">
                #{workName,jdbcType=VARCHAR},
            </if>
            <if test="workBudget != null">
                #{workBudget,jdbcType=VARCHAR},
            </if>
            <if test="workValue != null">
                #{workValue,jdbcType=INTEGER},
            </if>
            <if test="startTime != null">
                #{startTime,jdbcType=TIMESTAMP},
            </if>
            <if test="endTime != null">
                #{endTime,jdbcType=TIMESTAMP},
            </if>
            <if test="workState != null">
                #{workState,jdbcType=INTEGER},
            </if>
            <if test="workType != null">
                #{workType,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="workDesc != null">
                #{workDesc,jdbcType=LONGVARCHAR},
            </if>
            <if test="operateDesc != null">
                #{operateDesc,jdbcType=VARCHAR},
            </if>
            <if test="endSubmitTime != null">
                #{endSubmitTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUserName != null">
                #{updateUserName,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="selectLogWork"  resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select * from log_work where work_id=#{workId}
    </select>

    <insert id="andLogWorkBydelete" parameterType="java.util.Map">
        insert into log_work(work_id,state,create_by,create_time,update_by,update_time,operate_desc,update_user_name) values
        <foreach collection="array" item="asList" separator=",">
            (#{asList},#{state},#{createBy},now(),#{updateBy},now(),#{operateDesc},#{updateUserName})
        </foreach>
    </insert>
</mapper>